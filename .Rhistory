skip()
skip()
skip()
skip()
2
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
2
2
2
2
2
skip()
skip()
2
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
install_from_swirl("Regression Models")
swirl()
swirl()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
swirl()
swirl()
swirl()
swirl()
install.packages("swirl")
library(swirl)
install_from_swirl("Regression Models")
swirl()
1
skip()
swirl()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
skip()
2
2
2
skip()
skip()
skip()
skip()
skip()
skip()
library(car)
install.packages("~/Downloads/car_3.0-0.tgz", repos = NULL, type = .Platform$pkgType)
library(car)
library("car", lib.loc="/anaconda3/lib/R/library")
library(car)
clear
detach("package:car", unload=TRUE)
library(swirl)
swirl()
skip()
skip()
skip()
skip()
skip()
install.packages(p, quiet = TRUE)
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
install.packages("leaflet")
library(leaflet)
install.packages(car)
install.packages("car")
install.packages("car")
install.packages(plotty)
install.packages("plotly")
# Chunk 1
library(plotly)
## Loading required package: ggplot2
##
## Attaching package: 'plotly'
## The following object is masked from 'package:ggplot2':
##
##     last_plot
## The following object is masked from 'package:stats':
##
##     filter
## The following object is masked from 'package:graphics':
##
##     layout
library(readxl)
Camera <- read_excel("~/Documents/Coursera/Developing Data Products/Peer assessment 2/cameras/Camera.xlsx")
plot_ly(Camera, x = ~Maxresolution, y = ~Price, color = ~Pixels, mode = "markers")
## No trace type specified:
##   Based on info supplied, a 'scatter' trace seems appropriate.
##   Read more about this trace type -> https://plot.ly/r/reference/#scatter
setwd("~/Documents/gitrepos/Shyniapp1")
# Chunk 1
setwd("/Users/Raveendra_Swarna/Documents/gitrepos/shyniapp1")
library(ggplot2)
library(plotly)
movies <- read.csv("./movies.csv")
p <- plot_ly(movies, x=~Movie, y=~Budget, type='bar', name='Budget')%>%
add_trace(y=~Collection, name='Collection')%>%
layout(yaxis=list(title="Crores"), barmode='group')
p
# Chunk 2
plot(cars)
# Chunk 1
library(plotly)
library(dplyr)
# Randomly sample 1,000 rows from the `diamonds` dataframe
d <- diamonds[sample(nrow(diamonds), 1000), ]
# Chunk 2
# Chunk 1
library(plotly)
p <- plot_ly(economics, x = ~date, y = ~unemploy / pop)
# Chunk 2
p <- plot_ly(economics, x = ~date, y = ~unemploy / pop)
library(ggplot2)
# Chunk 1
library(plotly)
p <- plot_ly(data = iris, x = ~Sepal.Length, y = ~Petal.Length,
marker = list(size = 10,
color = 'rgba(255, 182, 193, .9)',
line = list(color = 'rgba(152, 0, 0, .8)',
width = 2))) %>%
layout(title = 'Styled Scatter',
yaxis = list(zeroline = FALSE),
xaxis = list(zeroline = FALSE))
# Create a shareable link to your chart
# Set up API credentials: https://plot.ly/r/getting-started
chart_link = api_create(p, filename="scatter-styled")
chart_link
# Chunk 2
# Chunk 1
library(plotly)
airquality_sept <- airquality[which(airquality$Month == 9),]
airquality_sept$Date <- as.Date(paste(airquality_sept$Month, airquality_sept$Day, 1973, sep = "."), format = "%m.%d.%Y")
p <- plot_ly(airquality_sept) %>%
add_trace(x = ~Date, y = ~Wind, type = 'bar', name = 'Wind',
marker = list(color = '#C9EFF9'),
hoverinfo = "text",
text = ~paste(Wind, ' mph')) %>%
add_trace(x = ~Date, y = ~Temp, type = 'scatter', mode = 'lines', name = 'Temperature', yaxis = 'y2',
line = list(color = '#45171D'),
hoverinfo = "text",
text = ~paste(Temp, 'Â°F')) %>%
layout(title = 'New York Wind and Temperature Measurements for September 1973',
xaxis = list(title = ""),
yaxis = list(side = 'left', title = 'Wind in mph', showgrid = FALSE, zeroline = FALSE),
yaxis2 = list(side = 'right', overlaying = "y", title = 'Temperature in degrees F', showgrid = FALSE, zeroline = FALSE))
# Create a shareable link to your chart
# Set up API credentials: https://plot.ly/r/getting-started
chart_link = api_create(p, filename="multiple-bar_line")
chart_link
# Chunk 2
# Chunk 1
## Read the fake csv data set about ice cream
ice.cream <- read.csv("icecream-img.csv", stringsAsFactors = FALSE)
# Chunk 2
plot(cars)
# Chunk 1
library(geozoo)
library(plotly)
library(tidyverse)
# Make reproducible
set.seed(1)
# Create conic spiral
df <- as.data.frame(conic.spiral.nautilus(n = 250000, a = 1, b = 1, c = 1, w = 12)$points) %>%
rename(x = V1, y = V2, z = V3)
# Create plot
p <- plot_ly(df, x = ~x, y = ~y, z = ~z, size = 0.05, opacity = 0.1,
marker = list(size = 1, color = "black")) %>%
add_markers()
p
# Chunk 2
plot(cars)
library(geozoo)
install.packages("geozoo")
library(geozoo)
# Chunk 1
library(geozoo)
library(plotly)
library(tidyverse)
# Make reproducible
set.seed(1)
# Create conic spiral
df <- as.data.frame(conic.spiral.nautilus(n = 250000, a = 1, b = 1, c = 1, w = 12)$points) %>%
rename(x = V1, y = V2, z = V3)
# Create plot
p <- plot_ly(df, x = ~x, y = ~y, z = ~z, size = 0.05, opacity = 0.1,
marker = list(size = 1, color = "black")) %>%
add_markers()
p
# Chunk 2
library(tidyverse)
install.packages("tidyverse")
library(tidyverse)
# Chunk 1
library(datasets)
library(plotly)
data(uspop) ## Load the data set that gives the population of the United States in millions for the period 1790-1970
## Plotly Command
plot_ly(x=~time(uspop),y=~uspop,type="scatter",mode="lines") %>% layout(title = "U.S. Population in millions for the period 1790-1970", xaxis = list(title = "Year"),yaxis = list(title = "U.S. Population (millions)"))
# Chunk 2
library(webhost)
install.packages("webshot")
library(webshot)
# Chunk 1
require("datasets")
data("airquality")
str(airquality)
# Chunk 2
head(airquality)
# Chunk 3
col1<- mapply(anyNA,airquality) # apply function anyNA() on all columns of airquality dataset
col1
# Impute monthly mean in Ozone
for (i in 1:nrow(airquality)){
if(is.na(airquality[i,"Ozone"])){
airquality[i,"Ozone"]<- mean(airquality[which(airquality[,"Month"]==airquality[i,"Month"]),"Ozone"],na.rm = TRUE)
}
# Impute monthly mean in Solar.R
if(is.na(airquality[i,"Solar.R"])){
airquality[i,"Solar.R"]<- mean(airquality[which(airquality[,"Month"]==airquality[i,"Month"]),"Solar.R"],na.rm = TRUE)
}
}
#Normalize the dataset so that no particular attribute has more impact on clustering algorithm than others.
normalize<- function(x){
return((x-min(x))/(max(x)-min(x)))
}
airquality<- normalize(airquality) # replace contents of dataset with normalized values
str(airquality)
# Chunk 4
Y<- airquality[,"Ozone"] # select Target attribute
X<- airquality[,"Solar.R"] # select Predictor attribute
model1<- lm(Y~X)
model1 # provides regression line coefficients i.e. slope and y-intercept
# Chunk 5
plot(Y~X) # scatter plot between X and Y
abline(model1, col="blue", lwd=3) # add regression line to scatter plot to see relationship between X and Y
# Chunk 6
Y<- airquality[,"Ozone"] # select Target attribute
X<- airquality[,"Wind"] # select Predictor attribute
model2<- lm(Y~X)
model2 # provides regression line coefficients i.e. slope and y-intercept
# Chunk 7
plot(Y~X) # scatter plot between X and Y
abline(model2, col="blue", lwd=3) # add regression line to scatter plot to see relationship between X and Y
setwd("~/Documents/gitrepos/rmarkdown/rmarkdownandplotly")
# Chunk 1
library(tidyverse)
library(rmarkdown)    # You need this library to run this template.
library(epuRate)      # Install with devtools: install_github("holtzy/epuRate", force=TRUE)
library(plotly)       # Turn your ggplot2 interactive
library(hrbrthemes)   # For good looking plots
library(DT)           # To show tables
# Chunk 2
data <- read.table("DATA/data.csv", header=T, sep=",") %>% dplyr::select(GrLivArea, SalePrice)
# Keep a few lines
data <- data %>% sample_n(100)
# Chunk 3
# Plot
p <- data %>%
mutate(text=paste("Apartment Number: ", seq(1:nrow(data)), "\nLocation: New York\nAny info you need..", sep="")) %>%
ggplot( aes(x=GrLivArea, y=SalePrice/1000, text=text)) +
geom_point(color="#69b3a2", alpha=0.8) +
ggtitle("Ground living area partially explains sale price of apartments") +
theme_ipsum() +
theme(
plot.title = element_text(size=12)
) +
ylab('Sale price (k$)') +
xlab('Ground living area')
# Turn it interactive
ggplotly(p, tooltip="text")
# Chunk 4
datatable(data, rownames = FALSE, filter="top", options = list(pageLength = 5, scrollX=T) )
library(tidyverse)
library(rmarkdown)
library(epuRate)
library(plotly)
library(hrbrthemes)
library(DT)
install.packages(epuRate)
install.packages(epuRate)
install.packages("epubr")
library(devtools)
install_github("holtzy/epuRate")
library(epuRate)
install.packages("devtools")
library(devtools)
install_github("holtzy/epuRate")
library(epuRate)
library(tidyverse)
library(rmarkdown)
library(epuRate)
library(plotly)
library(hrbrthemes)
library(DT)
install.packages(DT)
install.packages('DT')
install.packages("hrbrthemes")
# Chunk 1
library(tidyverse)
library(rmarkdown)
library(epuRate)
library(plotly)
library(hrbrthemes)
library(DT)
# Chunk 2
data <- read.table("DATA/data.csv", header=T, sep=",") %>% dplyr::select(GrLivArea, SalePrice)
# Keep a few lines
data <- data %>% sample_n(100)
# Chunk 3
# Plot
p <- data %>%
mutate(text=paste("Apartment Number: ", seq(1:nrow(data)), "\nLocation: New York\nAny info you need..", sep="")) %>%
ggplot( aes(x=GrLivArea, y=SalePrice/1000, text=text)) +
geom_point(color="#69b3a2", alpha=0.8) +
ggtitle("Ground living area partially explains sale price of apartments") +
theme_ipsum() +
theme(
plot.title = element_text(size=12)
) +
ylab('Sale price (k$)') +
xlab('Ground living area')
# Turn it interactive
ggplotly(p, tooltip="text")
# Chunk 4
datatable(data, rownames = FALSE, filter="top", options = list(pageLength = 5, scrollX=T) )
p <- data %>%
mutate(text=paste("Apartment Number: ", seq(1:nrow(data)), "\nLocation: New York\nAny info you need..", sep="")) %>%
ggplot( aes(x=GrLivArea, y=SalePrice/1000, text=text)) +
geom_point(color="#69b3a2", alpha=0.8) +
ggtitle("Ground living area partially explains sale price of apartments") +
theme_ipsum() +
theme(
plot.title = element_text(size=12)
) +
ylab('Sale price (k$)') +
xlab('Ground living area')
# Turn it interactive
ggplotly(p, tooltip="text")
library(tidyverse)
library(rmarkdown)    # You need this library to run this template.
library(epuRate)      # Install with devtools: install_github("holtzy/epuRate", force=TRUE)
library(plotly)       # Turn your ggplot2 interactive
library(hrbrthemes)   # For good looking plots
library(DT)           # To show tables
# Load dataset from github
data <- read.table("DATA/data.csv", header=T, sep=",") %>% dplyr::select(GrLivArea, SalePrice)
# Keep a few lines
data <- data %>% sample_n(100)
# Plot
p <- data %>%
mutate(text=paste("Apartment Number: ", seq(1:nrow(data)), "\nLocation: New York\nAny info you need..", sep="")) %>%
ggplot( aes(x=GrLivArea, y=SalePrice/1000, text=text)) +
geom_point(color="#69b3a2", alpha=0.8) +
ggtitle("Ground living area partially explains sale price of apartments") +
theme_ipsum() +
theme(
plot.title = element_text(size=12)
) +
ylab('Sale price (k$)') +
xlab('Ground living area')
# Turn it interactive
ggplotly(p, tooltip="text")
datatable(data, rownames = FALSE, filter="top", options = list(pageLength = 5, scrollX=T) )
setwd("~/Documents/gitrepos/rmarkdown/rmardown")
setwd("~/Documents/gitrepos/rmarkdown/rmarkdown")
